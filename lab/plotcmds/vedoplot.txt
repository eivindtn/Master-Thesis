#config figure
v.show([[config_result_2[0][0],config_result_2[0][1],config_result_2[0][2],plot[0][0].c('black'),config_result_2[0][4].c('b').lw(5),config_result_2[0][5].c('b').lw(5), ref,cam_sys, proj_syst],[config_result_2[1][0],config_result_2[1][1],config_result_2[1][2],plot[1][0].c('black'),config_result_2[1][4].c('b').lw(5),config_result_2[1][5].c('b').lw(5), ref,cam_sys, proj_syst],[config_result_2[2][0],config_result_2[2][1],config_result_2[2][2],plot[2][0].c('black'),config_result_2[2][4].c('b').lw(5),config_result_2[2][5].c('b').lw(5), ref,cam_sys, proj_syst]], N=3).close()

#projector projected image
v.show(v.Picture(plot[0][-1]),v.Picture(plot[1][-1]),v.Picture(plot[2][-1]), N=3, axes=1).close()

#thresh plot
v.show(v.Picture(plot[0][-3]),v.Picture(plot[1][-3]),v.Picture(plot[2][-3]), N=3, axes=1).close()

#all sections 
v.show(plot[0][0].c('g').ps(5),v.Points(plot[0][2]).c('r'), plot[1][0].c('g').ps(5),v.Points(plot[1][2]).c('r'),plot[2][0].c('g').ps(5),v.Points(plot[2][2]).c('r'), leg_point_cloud_projection).close()

#show point deviation 
v.show([[plot[0][0].c('black').ps(5),v.Points(plot[0][2]).c('r'), leg_point_cloud_projection, cam_sys],[plot[1][0].c('black').ps(5),v.Points(plot[1][2]).c('r'), leg_point_cloud_projection, cam_sys],
[plot[2][0].c('black').ps(5),v.Points(plot[2][2]).c('r'), leg_point_cloud_projection, cam_sys],[plot[0][0].c('black').ps(5),v.Points(plot[0][2]).c('r')],[plot[1][0].c('black').ps(5),v.Points(plot[1][2]).c('r')],
[plot[2][0].c('black').ps(5),v.Points(plot[2][2]).c('r')]], N=6).close()

#Signed distance
v.show([[plot[0][0], plot[0][4]],[plot[1][0], plot[1][4]],[plot[2][0], plot[2][4]]], N=3).close()

#Alligned after ICP
v.show([[plot[0][0], plot[0][3].c('r')],[plot[1][0], plot[1][3].c('r')],[plot[2][0], plot[2][3].c('r')]], N=3).close()

#print transformation matrix
for t in range(3):
    trans = plot[t][5]
    rot = plot[t][5][:3,:3]
    rot_e = gv.R_to_eul(rot)
    rot_e_d = rot_e.as_euler('xyz', degrees = True)
    translat = plot[t][5][:3,3]
    norm = np.linalg.norm(translat)
    print("Number", t)
    print("Transformation\n",trans)
    print("Rotation euler xyz",rot_e_d)
    print("Norm translat", norm)
    print("Average signed dist", plot[t][7])
    print("initial surface area ", plot[t][0].area())
    print("projected surface area ", plot[t][1].area())

#histogram
hst1 = v.pyplot.histogram(plot[0][6],
                 bins=30,
                 errors=True,
                 aspect=4/3,
                 title='',
                 xtitle='Signed distance (mm)',
		 ytitle = 'Number of points',
                 c='red',
                 marker='o',
                )
hst2 = v.pyplot.histogram(plot[1][6],
                 bins=30,
                 errors=True,
                 aspect=4/3,
                 title='',
                 xtitle='Signed distance (mm)',
		 ytitle = 'Number of points',
                 c='blue',
                 marker='o',
                )
hst3 = v.pyplot.histogram(plot[2][6],
                 bins=30,
                 errors=True,
                 aspect=4/3,
                 title='',
                 xtitle='Signed distance (mm)',
		 ytitle = 'Number of points',
                 c='green',
                 marker='o',
                )
v.show(hst1, hst2, hst3, N=3).close()


#look at smoothed boundries against splines
